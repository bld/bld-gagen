Package to generate efficient geometric algebras
================================================

Uses symbolic BLD-GA to expand expressions of sub-classes to generate
fast code for the basic geometric algebra functions.

Further development
===================

Currently working on making this program emit code in text files that
can be compiled standalone, without all the dependencies of the code
generator. May involve going back to the symbolic library and creating
a simpler, numeric-only library that the generated code depends on. Or
not. One problem that needs to be resolved are all the generic utility
functions & macros that were used in the symbolic library. How to get
the use of these in the generated code libraries? Easy solution - have
a generic code library that everything - symbolic & generated code -
uses. I really don't want to repeat anything if I can help it. I
already am in at least one spot - the parent geometric algebra used in
the code generator. It really doesn't need all that baggage, like SPEC
definition. That should be separate and only passed into the code
generator, and possibly saved in the generated classes.

More critically, there is missing code in the generated code - some
class slots are missing, because they are assumed to be included in
the parent classes.

One aspect that may simplify things: BLD-GA now uses the generic
arithmetic functions, which have both numeric and symbolic parts. If
the symbolic part is ignored, then it is more useful.

By all accounts the multivector class should be the parent of the
specialized subclasses. If it can be fully characterized, the children
can just inherit its properties.

Is code generated by a GPL tool GPL itself, or only if it's compiled
and linked TO the GPL code? I ask, in case I want to go back to the
internal Maxima library.

Another option, have the generated library load BLD-GA, and do a
SHADOWING-IMPORT of a BLD-NUM package that overwrites the symbolic
scalar arithmetic operations. Will that work?

How to do this simply? I need a symbolic GA library to do the code
generation. I don't need it in the generated library, but there is a
lot of overlap in various utility functions. I DON'T want to re-type
everything. A library that has all the common stuff would be handy.

Originally, I intended to have a symbolic parent class available to
users of a specific geometric algebra, as well as all the code
generation capabilities for writing one's own optimized
functions. This makes things a little complicated, considering I don't
have a built in CAS for doing that - I have Maxima, which serves the
purpose, but has some baggage. One, is that linking to Maxima requires
the combined code be released as GPL. Managing individual package
licenses could be tricky. Nice thing about Lisp is each component can
be loaded & downloaded individually, so the GPL only seems to kick in
with the act of running them together. The original libraries can be
developed independently of any with stricter licenses. But, any
downstream packages must have the most strict of the required license
terms. So, my toplevel project could be GPL, while many sub-components
remain MIT, so long as GPL code doesn't flow back upstream to
them. Two, Maxima is big and complex. An earlier attempt to make a
Maxima library broke when changes were made to SBCL. I still don't
know why, though somebidy did post fixes to it. That version was MUCH
faster than my socket (or worse, shell) interface.